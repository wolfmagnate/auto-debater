openapi: 3.0.3
info:
  title: Auto Debater API
  description: API for generating rebuttals, enhancing logical structures, and proposing improvements for debate graphs.
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server

tags:
  - name: Rebuttal Creation
    description: Endpoints for generating rebuttals against nodes and edges.
  - name: Logic Composition
    description: Endpoints for analyzing and strengthening logical structures.

paths:
  /api/create-rebuttal:
    post:
      tags:
        - Rebuttal Creation
      summary: Generate rebuttals for a subgraph
      description: |-
        Receives a main debate graph (for context) and a target subgraph. 
        It generates PMF and Evidence-based rebuttals for the subgraph, then returns the modified subgraph.
      requestBody:
        $ref: '#/components/requestBodies/CreateRebuttalRequest'
      responses:
        '200':
          description: Successfully generated rebuttals and returned the updated subgraph.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebateGraph'
        '400':
          $ref: '#/components/responses/BadRequest'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/enhance-logic:
    post:
      tags:
        - Logic Composition
      summary: Propose actions to enhance a causal link
      description: |-
        Receives a debate graph and a specific cause-and-effect pair.
        It proposes a list of concrete actions (e.g., inserting an intermediate node, strengthening an edge) to make the causal link more robust.
      requestBody:
        $ref: '#/components/requestBodies/EnhanceLogicRequest'
      responses:
        '200':
          description: Successfully generated a list of enhancement actions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnhancementAction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/enhance-todo:
    post:
      tags:
        - Logic Composition
      summary: Propose a TODO list to improve a subgraph
      description: |-
        Receives a main debate graph (for context) and a target subgraph. 
        It analyzes the subgraph and proposes a list of TODOs (actions) to strengthen its internal logic and arguments.
      requestBody:
        $ref: '#/components/requestBodies/EnhanceTODORequest'
      responses:
        '200':
          description: Successfully generated a list of TODO suggestions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TODOSuggestions'
        '400':
          $ref: '#/components/responses/BadRequest'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  # --- Reusable Request Bodies ---
  requestBodies:
    CreateRebuttalRequest:
      required: true
      description: The main graph for context and the subgraph to generate rebuttals for.
      content:
        application/json:
          schema:
            type: object
            properties:
              debate_graph:
                $ref: '#/components/schemas/DebateGraph'
              subgraph:
                $ref: '#/components/schemas/DebateGraph'
            required:
              - debate_graph
              - subgraph
    EnhanceLogicRequest:
      required: true
      description: The main graph and the specific cause/effect arguments to enhance.
      content:
        application/json:
          schema:
            type: object
            properties:
              debate_graph:
                $ref: '#/components/schemas/DebateGraph'
              cause:
                type: string
              effect:
                type: string
            required:
              - debate_graph
              - cause
              - effect
    EnhanceTODORequest:
      required: true
      description: The main graph for context and the subgraph to get TODOs for.
      content:
        application/json:
          schema:
            type: object
            properties:
              debate_graph:
                $ref: '#/components/schemas/DebateGraph'
              subgraph:
                $ref: '#/components/schemas/DebateGraph'
            required:
              - debate_graph
              - subgraph

  # --- Reusable Responses ---
  responses:
    BadRequest:
      description: Bad Request. The request body is malformed, or required fields are missing.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    MethodNotAllowed:
      description: Method Not Allowed. The endpoint only supports the POST method.
    InternalServerError:
      description: Internal Server Error. An error occurred on the server side.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  # --- Data Schemas ---
  schemas:
    # --- Response Body Schemas ---
    TODOSuggestions:
      type: object
      properties:
        todo:
          type: array
          items:
            $ref: '#/components/schemas/EnhancementTODO'

    # --- Core Action/TODO Schemas ---
    EnhancementAction:
      type: object
      description: A single concrete action to enhance logic. Exactly one property should be present.
      properties:
        strengthen_edge:
          $ref: '#/components/schemas/StrengthenEdgePayload'
        insert_node:
          $ref: '#/components/schemas/InsertNodePayload'
    
    EnhancementTODO:
      type: object
      description: A single suggested action (TODO). Exactly one property should be present.
      properties:
        strengthen_edge:
          $ref: '#/components/schemas/StrengthenEdgePayload'
        strengthen_node:
          $ref: '#/components/schemas/StrengthenNodePayload'
        insert_node:
          $ref: '#/components/schemas/InsertNodePayload'

    # --- Payload Schemas ---
    StrengthenEdgePayload:
      type: object
      properties:
        cause_argument: { type: string }
        effect_argument: { type: string }
        enhancement_type: { type: string, enum: [uniqueness, certainty] }
        content: { type: string }
      required: [cause_argument, effect_argument, enhancement_type, content]

    StrengthenNodePayload:
      type: object
      properties:
        target_argument: { type: string }
        content: { type: string }
      required: [target_argument, content]

    InsertNodePayload:
      type: object
      properties:
        cause_argument: { type: string }
        effect_argument: { type: string }
        intermediate_argument: { type: string }
      required: [cause_argument, effect_argument, intermediate_argument]

    # --- Debate Graph Structure Schemas ---
    DebateGraph:
      type: object
      description: Represents the entire structure of a debate.
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/DebateGraphNode'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/DebateGraphEdge'
        node_rebuttals:
          type: array
          items:
            $ref: '#/components/schemas/NodeRebuttal'
        edge_rebuttals:
          type: array
          items:
            $ref: '#/components/schemas/EdgeRebuttal'
        counter_argument_rebuttals:
          type: array
          items:
            $ref: '#/components/schemas/CounterArgumentRebuttal'
        turn_argument_rebuttals:
          type: array
          items:
            $ref: '#/components/schemas/TurnArgumentRebuttal'
      required: [nodes, edges]

    DebateGraphNode:
      type: object
      properties:
        argument: { type: string }
        is_rebuttal: { type: boolean }
        importance: { type: array, items: { type: string } }
        uniqueness: { type: array, items: { type: string } }
        importance_rebuttals: { type: array, items: { type: string } }
        uniqueness_rebuttals: { type: array, items: { type: string } }
      required: [argument, is_rebuttal]

    DebateGraphEdge:
      type: object
      properties:
        cause: { type: string }
        effect: { type: string }
        is_rebuttal: { type: boolean }
        certainty: { type: array, items: { type: string } }
        uniqueness: { type: array, items: { type: string } }
        certainty_rebuttal: { type: array, items: { type: string } }
        uniqueness_rebuttals: { type: array, items: { type: string } }
      required: [cause, effect, is_rebuttal]

    NodeRebuttal:
      type: object
      properties:
        target_argument: { type: string }
        rebuttal_type: { type: string }
        rebuttal_argument: { type: string }
      required: [target_argument, rebuttal_type, rebuttal_argument]

    EdgeRebuttal:
      type: object
      properties:
        target_cause_argument: { type: string }
        target_effect_argument: { type: string }
        rebuttal_type: { type: string }
        rebuttal_argument: { type: string }
      required: [target_cause_argument, target_effect_argument, rebuttal_type, rebuttal_argument]
    
    CounterArgumentRebuttal:
      type: object
      properties:
        rebuttal_argument: { type: string }
        target_argument: { type: string }
      required: [rebuttal_argument, target_argument]

    TurnArgumentRebuttal:
      type: object
      properties:
        rebuttal_argument: { type: string }
      required: [rebuttal_argument]

    # --- Common Error Schema ---
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Bad request: required fields are missing"
